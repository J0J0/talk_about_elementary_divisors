\ProvidesPackage{helpers}
% '\RequirePackage's left out, so make sure that packages are loaded elsewhere!


% takes a macro (e.g. \cmd) and yields its name (e.g. cmd)
\newcommand*{\@removebackslash}[1]{\expandafter\@gobble\string#1}


% execute #1 for each token in #2
\newcommand\@callforeachtoken[2]{%
\@tfor \next := #2 \do{%
\expandafter#1\expandafter{\next}%
}%
}

% define command #1 to be a 'foreach token' version of #2
\newcommand\@newforeachtokencommand[2]{%
\newcommand{#1}[1]{\@callforeachtoken{#2}{##1}}%
}


% this takes a greek letter macro, e.g. \epsilon,
% and does the following things:
% - save \epsilon as \origepsilon
% - overwrite \epsilon with \varepsilon
\newcommand*{\@varifygreekletter}[1]{%
\begingroup
    \edef\@tempname{\@removebackslash{#1}}%
    \edef\@tempvar{\csname var\@tempname\endcsname}%
    \edef\@temporig{\csname orig\@tempname\endcsname}%
    \expandafter\newcommand\@temporig{} % just make sure LaTeX complains if we
                                        % intend to overwrite an existing macro
    \expandafter\global\expandafter\let\@temporig=#1%
    \global\let#1=\@tempvar%
\endgroup
}

% like the macro above but takes a list of macros, e.g:
% \epsilon\theta\phi
\@newforeachtokencommand\varifygreekletters\@varifygreekletter



% can be used to make single letter shortcuts for special sets like N,Z,\dots.
% example: \defmathbbsymbol{N}, then type \N in mathmode
\newcommand{\@defmathbbsymbol}[1]{%
    \expandafter\newcommand\csname #1\endcsname{\mathbb{#1}}%
}

% like the above but makes a 'subscript version':
% the defined commands can be called like this
% \N[>0]
% to produce \N_{>0}
\newcommand{\@defmathbbsymbolsub}[1]{%
    \expandafter\newcommand\csname #1\endcsname[1][]{%
        \@ifmtarg{##1}{\mathbb{#1}}{\mathbb{#1}_{##1}}%
    }%
}

% tokenlist versions of the two commands above.
% example: \defmathbbsymbols{N Z Q} or \defmathbbsymbolsubs{N Z Q}
\@newforeachtokencommand\defmathbbsymbols\@defmathbbsymbol
\@newforeachtokencommand\defmathbbsymbolsubs\@defmathbbsymbolsub



% want a shorter command for matrices \dots
\newcommand*{\Matrix}[1]{%
\begin{pmatrix} #1 \end{pmatrix}%
}

% \dots and vectors
\newcommand{\vect}{}
\let\vect=\Matrix



%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% definitions for the 'trimatrixoperations' environment
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% this part should be rewritten and packed into a separate package \dots
% but since i'm (most likely) not ever going to use this again, i just
% decided to leave it in its current 'hacked together quick and dirty' state
%
\providecommand{\downsquigarrow}{\rotatebox{-90}{$\rightsquigarrow$}}

\newcommand{\matops@colstart}{\begin{gmatrix}}
\newcommand{\matops@colend}{\end{gmatrix}&}
\newcommand{\matops@newline}{\end{gmatrix}\\\matops@turnsinto}
\newcommand{\matops@end}{\end{gmatrix}}

% this is to be set manually because i didn't bother with the tedious task to
% find the middle of the 'line' within the \noalign used below
\newlength{\arrowpos}
\setlength{\arrowpos}{5cm} % default

% arrow / symbol between steps
\newcommand{\matops@turnsinto}{%
\noalign{\vskip7pt\hbox to \arrowpos{\hfill\downsquigarrow}\vskip7pt}%
}

% measure matrix (visual) size
\newsavebox{\matops@matrixh}
\newlength{\matops@matrixheight}
\savebox{\matops@matrixh}{$\displaystyle\begin{gmatrix}1\\2\\3\end{gmatrix}$}
\setlength{\matops@matrixheight}{\ht\matops@matrixh}
\addtolength{\matops@matrixheight}{\dp\matops@matrixh}

% macro for the vertical bar between the left, middle and right matrix
\newcommand{\matops@interrule}{%
\rule[-0.8\dp\matops@matrixh]{0.4pt}{0.9\matops@matrixheight}}

% spaces between the bar and the left / right matrix
\newcommand{\matops@interspaceleft}{\quad}
\newcommand{\matops@interspaceright}{\qquad}

% macro for the left / right parenthesis around all matrices
\newcommand{\matops@leftparen}{%
\ensuremath{\displaystyle\left(\vphantom{\matops@interrule}\right.}}
\newcommand{\matops@rightparen}{%
\ensuremath{\displaystyle\left.\vphantom{\matops@interrule}\right)}}

% column style that inserts the begin matrix command
\newcolumntype{R}{>{\matops@colstart}r}
\newcolumntype{C}{>{\matops@colstart}c}
\newcolumntype{L}{>{\matops@colstart}l}

% environment to be used
\newenvironment{trimatrixoperations}[1][L]{%
% user space macros
\newcommand{\nextcol}{\matops@colend}
\renewcommand{\|}{\matops@colend}
\newcommand{\nextstep}{\matops@newline}
\newcommand{\continued}{\matops@turnsinto}
%
\begin{array}{@{\matops@leftparen\,}%
              R%
              @{\matops@interspaceleft\matops@interrule\matops@interspaceright}%
              #1%
              @{\matops@interspaceleft\matops@interrule\matops@interspaceright}%
              L%
              @{\kern-4pt\matops@rightparen}}
}{%
\matops@end
\end{array}
}

% save original macro that is inserted after gmatrix cell's content
\let\g@post@orig=\g@post

% make gmatrix right aligned
\newcommand{\gmatrixright}{%
    \xdef\g@post{\relax$}
}

% revert to default
\newcommand{\gmatrixcenter}{%
    \global\let\g@post=\g@post@orig
}

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%






